"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from ding import utils
from enum import Enum
from typing import Optional

class RetryAuthenticationResponseStatus(str, Enum):
    r"""The status of the retry. Possible values are:
      * `approved` - The retry was approved and a new code was sent.
      * `denied` - The retry was denied.
      * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
      * `rate_limited` - The authentication was rate limited and cannot be retried.
      * `expired_auth` - The authentication has expired and cannot be retried.
      * `already_validated` - The authentication has already been validated.
    """
    APPROVED = 'approved'
    DENIED = 'denied'
    NO_ATTEMPT = 'no_attempt'
    RATE_LIMITED = 'rate_limited'
    EXPIRED_AUTH = 'expired_auth'
    ALREADY_VALIDATED = 'already_validated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetryAuthenticationResponse:
    authentication_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the corresponding authentication."""
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    next_retry_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_retry_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""The time at which the next retry will be available."""
    remaining_retry: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remaining_retry'), 'exclude': lambda f: f is None }})
    r"""The number of remaining retries."""
    status: Optional[RetryAuthenticationResponseStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the retry. Possible values are:
      * `approved` - The retry was approved and a new code was sent.
      * `denied` - The retry was denied.
      * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
      * `rate_limited` - The authentication was rate limited and cannot be retried.
      * `expired_auth` - The authentication has expired and cannot be retried.
      * `already_validated` - The authentication has already been validated.
    """
    

